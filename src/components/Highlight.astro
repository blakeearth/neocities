---
import { getCollection } from "astro:content";
import Tag from "./Tag.astro";
import FormattedDate from "./FormattedDate.astro";

const { highlightId } = Astro.props;

const books = await getCollection("books");
const highlights = await getCollection("highlights");

const highlightItem = highlights.find((h: { id: any }) => h.id === highlightId);
const highlight = highlightItem!.data;

const bookItem = books.find((b: { id: any }) => b.id === highlight.OLID);
const book = bookItem!.data;
---

<blockquote class="flex flex-col w-full border-white border-l-1 py-4 pl-4">
  <div class="flex gap-4 justify-between h-full">
    <div class="w-full flex flex-col justify-between gap-8">
      <span class="text-xl lg:text-2xl">{highlight.text}</span>
      <div class="flex justify-between items-start">
        <div class="flex flex-col gap-2">
          <span class="text-sm">
            —{book.author}, <cite
              ><a href={`/library/highlights/books/${highlight.OLID}`}
                >{book.title}</a
              ></cite
            >. Highlighted <FormattedDate
              date={new Date(highlight.timestamp)}
            />
          </span>
          <div class="flex gap-2 flex-wrap">
            {
              highlight.tags.split(",").map((tag: unknown) => (
                <Tag emoji="⭐" href={`/library/highlights/tags/${tag}`}>
                  {tag}
                </Tag>
              ))
            }
          </div>
        </div>
      </div>
    </div>
    {
      book?.coverImage?.medium && (
        <a href={`/library/highlights/books/${highlight.OLID}`}>
          <img
            src={book.coverImage.medium}
            alt={`Cover of ${book.title}`}
            class="rounded-xl hidden md:block"
          />
        </a>
      )
    }
  </div>
</blockquote>
